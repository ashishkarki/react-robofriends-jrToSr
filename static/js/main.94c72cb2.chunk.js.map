{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.jsx","constants.js","components/MyHeader.jsx","containers/App.js","actions.js","registerServiceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","console","log","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","errorInfo","this","setState","React","Component","SET_SEARCH_TERM","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","MyHeader","title","memo","App","searchTerm","useSelector","searchTermReducer","requestRobotsReducer","dispatch","useDispatch","onRequestRobots","useCallback","fetch","then","response","json","data","payload","catch","useEffect","filteredRobots","filter","robot","toLowerCase","includes","isPending","event","setSearchTermAction","target","value","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.94c72cb2.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react'\nimport Card from './Card'\n\nconst CardList = ({ robots }) => {\n  console.log('CardList')\n  return (\n    <div>\n      {robots.map((user, i) => {\n        return (\n          <Card\n            key={i}\n            id={robots[i].id}\n            name={robots[i].name}\n            email={robots[i].email}\n          />\n        )\n      })}\n    </div>\n  )\n}\n\nexport default CardList\n","import React from 'react'\n\nconst SearchBox = ({ searchChange }) => {\n  console.log('SearchBox')\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"search robots\"\n        onChange={searchChange}\n      />\n    </div>\n  )\n}\n\nexport default SearchBox\n","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React from 'react'\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { hasError: false }\n  }\n\n  componentDidCatch(error, errorInfo) {\n    this.setState({ hasError: true })\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Something went wrong.</h1>\n    }\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundary\n","export const SET_SEARCH_TERM = 'SET_SEARCH_TERM'\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'\n","import React from 'react'\n\nfunction MyHeader({ title = 'RoboFriends' }) {\n  console.log('MyHeader.render()')\n  return <h1 className=\"f1\">{title}</h1>\n}\n\nexport default React.memo(MyHeader)\n","import React, { useCallback, useEffect, useState } from 'react'\nimport { connect, useDispatch, useSelector } from 'react-redux'\nimport CardList from '../components/CardList'\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/Scroll'\nimport ErrorBoundary from '../components/ErrorBoundary'\nimport './App.css'\n\nimport { requestRobotsAction, setSearchTermAction } from '../actions'\nimport MyHeader from '../components/MyHeader'\n\n// const mapStateToProps = (state) => {\n//   return {\n//     searchTerm: state.searchTermReducer.searchTerm,\n//     robots: state.requestRobotsReducer.robots,\n//     isPending: state.requestRobotsReducer.isPending,\n//     error: state.requestRobotsReducer.error,\n//   }\n// }\n\n// const mapDisptachToProps = (dispatch) => {\n//   return {\n//     onSearchTermChange: (event) =>\n//       dispatch(setSearchTermAction(event.target.value)),\n//\n//   }\n// }\n\nexport const App = () => {\n  const { searchTerm } = useSelector((state) => state.searchTermReducer)\n  const requestRobotsReducer = useSelector(\n    (state) => state.requestRobotsReducer,\n  )\n  const dispatch = useDispatch()\n\n  const onRequestRobots = useCallback(() => dispatch(requestRobotsAction(), []))\n\n  const onSearchTermChange = (event) => {\n    dispatch(setSearchTermAction(event.target.value))\n  }\n\n  useEffect(() => {\n    console.log('App.js useEffect, disptaching action')\n    onRequestRobots()\n  }, [])\n\n  const filteredRobots = requestRobotsReducer.robots.filter((robot) => {\n    return robot.name.toLowerCase().includes(searchTerm.toLowerCase())\n  })\n\n  return requestRobotsReducer.isPending ? (\n    <h1>Loading</h1>\n  ) : (\n    <div className=\"tc\">\n      <MyHeader />\n      <SearchBox searchChange={onSearchTermChange} />\n      <Scroll>\n        <ErrorBoundary>\n          <CardList robots={filteredRobots} />\n        </ErrorBoundary>\n      </Scroll>\n    </div>\n  )\n}\n\n// export default connect(mapStateToProps, mapDisptachToProps)(App)\nexport default App\n","import { SET_SEARCH_TERM } from './constants'\n\nexport const setSearchTermAction = (searchTerm) => {\n  return {\n    type: SET_SEARCH_TERM,\n    payload: searchTerm,\n  }\n}\n\nexport const requestRobotsAction = () => (dispatch) => {\n  console.log('actions.js - requestRobotsAction', dispatch)\n  dispatch({\n    type: 'REQUEST_ROBOTS_PENDING',\n  })\n\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then((response) => response.json())\n    .then((data) =>\n      dispatch({\n        type: 'REQUEST_ROBOTS_SUCCESS',\n        payload: data,\n      }),\n    )\n    .catch((error) =>\n      dispatch({\n        type: 'REQUEST_ROBOTS_FAILED',\n        payload: error,\n      }),\n    )\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  REQUEST_ROBOTS_FAILED,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  SET_SEARCH_TERM,\n} from './constants'\n\nconst initialStateSearch = {\n  searchTerm: '',\n}\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: '',\n}\n\nexport const searchTermReducer = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case SET_SEARCH_TERM:\n      return { ...state, searchTerm: action.payload }\n    default:\n      return state\n  }\n}\n\nexport const requestRobotsReducer = (\n  state = initialStateRobots,\n  action = {},\n) => {\n  console.log('requestRobotsReducer, action:', action, state)\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return { ...state, isPending: true }\n    case REQUEST_ROBOTS_SUCCESS:\n      return { ...state, robots: action.payload, isPending: false }\n    case REQUEST_ROBOTS_FAILED:\n      return { ...state, error: action.payload, isPending: false }\n    default:\n      return state\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, combineReducers } from 'redux'\nimport { createLogger } from 'redux-logger'\nimport thunk from 'redux-thunk'\nimport './index.css'\nimport App from './containers/App'\nimport registerServiceWorker from './registerServiceWorker'\nimport 'tachyons'\nimport { searchTermReducer, requestRobotsReducer } from './reducers'\n\nconst logger = createLogger()\n\nconst rootReducer = combineReducers({\n  searchTermReducer,\n  requestRobotsReducer,\n})\nconst store = createStore(rootReducer, applyMiddleware(thunk, logger))\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n)\n// registerServiceWorker();\n\n// why did you update plugin setup\n// is this package outdated? the following is not working\nif (process.env.NODE_ENV !== 'production') {\n  const { whyDidYouUpdate } = require('why-did-you-update')\n  whyDidYouUpdate(React)\n}\n"],"sourceRoot":""}